import json
import os
import sys

"""
Output the typescript files that will be necessary to describe these items.

One file will be in the common shared between the front and backend. This file contains:
- an enum of all the item names converted to upper snake case
- A mapping from enum to rarity

One file will be only for the frontend. This file contains:
- A mapping from internal id to item enum
- A mapping from item enum to image file

A folder will contain every png file for the items.
"""

def to_camel_case(snake_str):
    return "".join(x.capitalize() for x in snake_str.lower().split("_"))

def parse_rarity(r):
    if r == None:
        return "Special"
    return to_camel_case(r)

def process_json(input_file, img_folder, output_directory):
    try:
        # Read JSON from the input file
        with open(input_file, 'r') as f:
            data = json.load(f)
        
        # Check if the output directory exists
        if not os.path.exists(output_directory):
            # Create the output directory if it doesn't exist
            os.makedirs(output_directory)
        else:
            print(f"Error: Directory '{output_directory}' already exists. Aborting.")
            sys.exit(1)
        
        output_file_common = os.path.join(output_directory, 'items_common.ts')
        output_file_frontend = os.path.join(output_directory, 'items_frontend.ts')
        output_dir_imgs = os.path.join(output_directory, "imgs")
        
        item_names = list(data.keys())
        enum_names = {}
        for iname in item_names:
            enum_names[iname] = to_camel_case(iname)
        
        # Write to the common file
        with open(output_file_common, 'w') as f:
            f.write("// Generated by scrape_items.py\n")
            f.write('import { Rarity } from "../common/models/rarity"\n\n\n')
            f.write("export enum Item {\n")
            for iname in item_names:
                f.write(f'    {enum_names[iname]} = "{enum_names[iname]}",\n')
            f.write('}\n\n\n')
            f.write("export const ITEM_RARITIES: Record<Item, Rarity> = {\n")
            for iname in item_names:
                f.write(f"    [Item.{enum_names[iname]}]: Rarity.{parse_rarity(data[iname]['rarity'])},\n")
            f.write("};\n")
        
        # Write to the frontend-only file
        with open(output_file_frontend, 'w') as f:
            f.write("// Generated by scrape_items.py\n")
            f.write('import { Item } from "../common/models/item"\n\n\n')
            for iname in item_names:
                f.write(f'const {iname} = require("../img/items/{iname}.png);\n')
            f.write('\n\n\n')

            f.write('export const IIDToItem = (iid: string): Symbol => {\n    return IID_TO_ITEM.get(iid) ?? Item.ItemMissing;\n}\n\n')
            f.write("// Internal ID to item mapping")
            f.write("export const IID_TO_ITEM: Map<string, Item> = new Map([\n")
            for iname in item_names:
                f.write(f'    ["{iname}", Item.{enum_names[iname]}],\n')
            f.write("]);\n\n\n")

            f.write('export const ITEM_TO_IMG: Map<Item, string> = new Map([\n')
            for iname in item_names:
                f.write(f'[Item.{enum_names[iname]}, {iname}],\n')
            f.write('])\n')
        
        # Move over all images
        print(f"Copying images to {output_dir_imgs}")
        os.makedirs(output_dir_imgs)
        for iname in item_names:
            img_file_path = os.path.join(img_folder, iname + ".png")
            os.system(f"cp {img_file_path} {output_dir_imgs}")

        # print(f"JSON successfully copied from '{input_file}' to '{output_file}'.")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("Usage: python script.py input_file img_folder output_folder")
        sys.exit(1)

    input_file = sys.argv[1]
    img_folder = sys.argv[2]
    output_folder = sys.argv[3]

    process_json(input_file, img_folder, output_folder)