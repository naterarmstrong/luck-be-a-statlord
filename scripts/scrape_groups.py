import json
import os
import sys

"""
Output a typescript file with:

- A string enum of every group
- A mapping from groups to their constituent symbols or items.

This does still need to be fixed up for some symbols whose internal IDs do not match their enum
name. Geologist, Eldritch Creature, Wealthy Capsule, Hustler, and Buffing Capsule.

"""

def to_camel_case(snake_str):
    return "".join(x.capitalize() for x in snake_str.lower().split("_"))

def process_json(input_file, output_file):
    with open(input_file, 'r') as f:
        data = json.load(f)

    groups = {}

    for symbol in list(data.keys()):
        symbol_data = data[symbol]
        symbol_groups = symbol_data['groups']
        for group in symbol_groups:
            if group in groups:
                groups[group].append(symbol)
            else:
                groups[group] = [symbol]
    
    with open(output_file, 'w') as f:
        f.write("// Generated by scrape_groups.py\n")
        f.write('import { Symbol } from "./symbol"\n\n\n')
        f.write('import { Item } from "./item"\n\n\n')
        f.write("export enum Group {\n")
        for group in groups.keys():
            f.write(f'    {group.capitalize()} = "{group}",\n')
        f.write('}\n\n\n')

        f.write("export const GROUP_MEMBERS: Record<Group, Array<Symbol | Item>> = {\n")
        for group in groups.keys():
            s_arr = ["Symbol." + to_camel_case(s) for s in groups[group]]
            f.write(f'    [Group.{group.capitalize()}]: [\n')
            for s in s_arr:
                f.write(f'        {s},\n')
            f.write('    ],\n')
        f.write("};\n\n\n")

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python scrape_groups.py input_file output_file")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]

    process_json(input_file, output_file)